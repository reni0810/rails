.container
  .row
    %h1.display-3 Restaurants
    = link_to 'terms&conditions', terms_conditions_path
    = link_to 'privacy&polices', privacy_polices_path
  %ul.nav
    %li.nav-item
      %a.nav-link.active{"data-toggle": "tab", href: "#list", class: "btn btn-primary"} List
    %li.nav-item
      %a.nav-link{"data-toggle": "tab", href: "#map", class: "btn btn-primary"} Map
  %br
  .form-inline
    = form_with(url: restaurants_path,method: 'get' ,local: true) do |f|
      =f.select("cuisine_id", Cuisine.all.collect{|c| [c.name,c.id]}, {include_blank: "select cuisines", selected: @search_cuisine}, {class: "form-control dependent-load", id: 'cuisine_id', data: {url:"/select_recipe?cuisine_id=" , target:"recipe_id" }})
      = f.select("recipe_id"," ",{include_blank:"select recipe", selected: @search_recipe },{ class: "form-control", id: 'recipe_id' })
      = f.select("facility_id",Facility.all.collect{ |f| [f.name,f.id] },{include_blank:"select facility", selected: @search_facility },{ class: "form-control" })
      =f.text_field :date, class: "form-control", id: "datepicker", placeholder: "select unavailable date"
      = f.text_field :search, value: params[:search], class: "search form-control  autocomplete", placeholder: "search", autocomplete: "off",data:{url: "/references"}
      = f.submit "search", class: "btn btn-success"
  %br
  .tab-content
    #list.container.tab-pane.active
      .row
        - @restaurants.each_with_index do |restaurant,index|
          .col-lg-6.mb-6
            .card.h-100
              %h4.card-header= restaurant.name
              .card-body
                - if restaurant.picture.attached?
                  = image_tag restaurant.picture,class: 'img-responsivev img-fluid'

                %p.card-text
                  .row.container
                    .col-lg-4.mb-4
                      %strong.text-success Adress:
                    .col
                      = restaurant.address
                %p.card-text
                  .row.container
                    .col-lg-4.mb-4
                      %strong.text-success latitude:
                    .col
                      = restaurant.latitude
                      =restaurant.longitude
                %p.card-text
                  .row.container
                    .col-lg-4.mb-4
                      %strong.text-success Mobile_no:
                    .col
                      = restaurant.mobile_no
                %p.card-text
                  .row.container
                    .col-lg-4.mb-4
                      %strong.text-success Timing:
                    .col
                      - restaurant.timings.each do |timing|
                        %p.card-text
                          = timing.day
                          \:
                          \#{timing.start_time.strftime('%H:%M %p')} to #{timing.end_time.strftime('%H:%M %p')}
                %p.card-text
                  .row.container
                    .col-lg-4.mb-4
                      %strong.text-success Cuisines  recipes:
                    .col
                      - restaurant.cuisines.each do |cuisines|
                        %p.card-text
                          = cuisines.name
                          \:
                          - cuisines.recipes.each do |recipes|
                            = recipes.name
                            \(
                            = recipes.description
                            \)
                %p.card-text
                  .row.container
                    .col-lg-4.mb-4
                      %strong.text-success unavailable Date:
                    .col
                      - restaurant. unavailabities.each do |unavailable|
                        %p.card-text>= unavailable.date
                        Timing:
                        \#{unavailable.start_time.strftime('%H:%M %p')} to #{unavailable.end_time.strftime('%H:%M %p')}
                %p.card-text
                  .row.container
                    - restaurant.facilities.each do |facility|
                      - if facility.present?
                        .col-lg-4.mb-4
                          %strong.text-success Facilities:
                        .col
                          %p.card-text
                            = facility.name
                            \:
                            \#{facility.description}


              - if restaurant.user_id == current_user.id
                .card-footer
                  .row
                    .col
                      = link_to 'Show', restaurant
                    .col
                      = link_to 'Edit', edit_restaurant_path(restaurant)
                    .col
                      = link_to 'Destroy', restaurant, method: :delete, data: { confirm: 'Are you sure?' }
      %br
      .pagination.justify-content-center
        = paginate @restaurants

      #map.container.tab-pane.fade
        #map

:javascript
  function initMap(){
    var bounds = new google.maps.LatLngBounds();
    latlongs = #{raw @latlong.to_json}
    restaurants_details = #{raw @restaurants_details.to_json}
    restaurants = []
    var infoWindow = new google.maps.InfoWindow(), marker, i;
    var map = new google.maps.Map(document.getElementById('map'));

    for(i=0; i<latlongs.length;i++)
    {
      restaurants[i] = '<div class= "information">' +
                  '<h3>' + restaurants_details[i]["name"] + '</h3>' +
                  '<img src= '+ restaurants_details[i]["image"] +' height="120" width="200">' +
                  '<p>' + restaurants_details[i]["address"] + '</p>' + '</div>'
      var position = new google.maps.LatLng(latlongs[i]["lat"], latlongs[i]["long"]);
      bounds.extend(position);
      marker = new google.maps.Marker({
        position: position,
        map: map,
        title: restaurants_details[i]["name"],
      });
      map.fitBounds(bounds);

      google.maps.event.addListener(marker, 'click', (function(marker, i){
          return function() {
            infoWindow.setContent(restaurants[i]);
            infoWindow.open(map, marker);
          }
        })(marker, i));
    }

    var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
        this.setZoom(13);
        google.maps.event.removeListener(boundsListener);
    });
  }
%script{src: "https://maps.google.com/maps/api/js?&key=AIzaSyAiJNfed7HBLMu23iVILURSuQ7Sw15aO4s&callback=initMap"}
